name: Django CI

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: run flake8 .


  test:
    needs: lint
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations
        run: python manage.py migrate

      - name: Run tests
        run: python manage.py test


  build:
    needs: test
    runs-on: ubuntu-latest
    env:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/DRF_CW:latest -f Dockerfile .

      - name: Log in Docker hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker image in Docker hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/DRF_CW:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ secrets.DEBUG }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      TOKEN_TG_BOT: ${{ secrets.TELEGRAM_TOKEN }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
      CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}  << E0F0
          cd DRF_CW
          printf "SECRET_KEY=%s\n" "$SECRET_KEY" > .env
          printf "DEBUG=%s\n" "$DEBUG" >> .env
          printf "POSTGRES_DB=%s\n" "$POSTGRES_DB" >> .env
          printf "POSTGRES_USER=%s\n" "$POSTGRES_USER" >> .env
          printf "POSTGRES_PASSWORD=%s\n" "$POSTGRES_PASSWORD" >> .env
          printf "POSTGRES_HOST=%s\n" "$POSTGRES_HOST" >> .env
          printf "POSTGRES_PORT=%s\n" "$POSTGRES_PORT" >> .env
          printf "TELEGRAM_TOKEN=%s\n" "TELEGRAM_TOKEN" >> .env          
          printf "CELERY_BROKER_URL=%s\n" "$CELERY_BROKER_URL" >> .env
          printf "CELERY_RESULT_BACKEND=%s\n" "$CELERY_RESULT_BACKEND" >> .env
          sudo git pull
          sudo docker stop DRF_CW || true
          sudo docker rm -f DRF_CW || true
          sudo docker compose down -v
          sudo docker compose up -d --build
          E0F0